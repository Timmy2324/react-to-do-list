{"version":3,"sources":["api/todolists-api.ts","components/Input/InputWithButton.tsx","components/EditableSpan/EditableSpan.tsx","components/ToDoList/reducers/tasks-reducer.ts","components/ToDoList/Task/Task.tsx","components/ToDoList/ToDoList.tsx","components/ToDoListsList/ToDoListsList.tsx","components/ToDoList/reducers/todolists-reducer.ts","app/App.tsx","serviceWorker.ts","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","InputWithButton","memo","props","useState","title","setTitle","error","setError","errorMessage","style","color","addItem","callBack","TextField","variant","value","onChange","e","currentTarget","trim","onKeyPress","key","helperText","IconButton","size","onClick","Add","EditableSpan","isEdit","setIsEdit","autoFocus","onBlur","onDoubleClick","className","instance","axios","create","baseURL","withCredentials","headers","todolistsApi","get","post","toDoListID","delete","put","taskID","taskBody","updateTask","modelTask","dispatch","getState","task","tasks","find","id","updatedTask","description","status","priority","startDate","deadline","then","response","type","payload","todolistId","taskId","model","console","warn","Task","Checkbox","checked","Completed","changeStatus","removeTask","DeleteOutline","ToDoList","useDispatch","useSelector","state","useEffect","data","items","addTask","useCallback","item","createTask","deleteTask","updateTaskTitle","New","onClickFilterAllTasks","changeFilter","onClickFilterActiveTasks","onClickFilterCompletedTasks","updateToDoListTitle","tasksForTodolist","filter","t","taskList","map","removeToDoList","ButtonGroup","Button","ToDoListsList","toDoLists","changeTodolistFilterAC","deleteToDoList","changeTodolistTitleAC","changeToDoListTitle","addToDoList","toDoList","createToDoList","Grid","container","padding","spacing","list","Paper","App","AppBar","position","Toolbar","edge","sx","mr","Menu","Typography","component","flexGrow","Container","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","tl","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8302fa58.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n// types\r\nexport type ToDoListType = {\r\n    id: string,\r\n    title: string,\r\n    addedDate: string,\r\n    order: number,\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string,\r\n    title: string,\r\n    status: TaskStatuses,\r\n    priority: TaskPriorities,\r\n    startDate: string,\r\n    deadline: string,\r\n    id: string,\r\n    todoListId: string,\r\n    order: number,\r\n    addedDate: string,\r\n}\r\n\r\ntype ResponseType<T = {}> = {\r\n    resultCode: number,\r\n    messages: Array<string>,\r\n    data: T,\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    items: TaskType[],\r\n    error: string | null,\r\n    totalCount: number,\r\n}\r\n\r\nexport type UpdateTaskType = {\r\n    title: string,\r\n    description: string,\r\n    status: TaskStatuses,\r\n    priority: TaskPriorities,\r\n    startDate: string,\r\n    deadline: string,\r\n}\r\n\r\n//api\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"642ef21e-b6f0-4355-8bfb-f882a3b3360e\",\r\n    },\r\n\r\n});\r\n\r\nexport const todolistsApi = {\r\n    getToDoLists() {\r\n        return instance.get<Array<ToDoListType>>(`todo-lists/`);\r\n    },\r\n    createToDoList(title: string) {\r\n        return instance.post<ResponseType<{item: ToDoListType}>>(`todo-lists/`, {title});\r\n    },\r\n    deleteToDoList(toDoListID: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${toDoListID}`);\r\n    },\r\n    updateToDoList(toDoListID: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${toDoListID}`, {title});\r\n    },\r\n    getTasks(toDoListID: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${toDoListID}/tasks`);\r\n    },\r\n    deleteTask(toDoListID: string, taskID: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${toDoListID}/tasks/${taskID}`);\r\n    },\r\n    createTask(toDoListID: string, title: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${toDoListID}/tasks`, {title});\r\n    },\r\n    updateTask(toDoListID: string, taskID: string, taskBody: UpdateTaskType) {\r\n        return instance.put<ResponseType>(`todo-lists/${toDoListID}/tasks/${taskID}`, {...taskBody});\r\n    }\r\n}","import React, {ChangeEvent, KeyboardEvent, memo, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport {Add} from \"@mui/icons-material\";\r\n\r\nexport type InputPropsType = {\r\n    callBack: (title:string) => void\r\n}\r\n\r\nexport const InputWithButton = memo((props: InputPropsType) => {\r\n\r\n    const [title, setTitle] = useState('');\r\n    const [error, setError] = useState<boolean>(false);\r\n\r\n    const errorMessage = error && <div style={{color: 'red'}}>Title is required</div>;\r\n\r\n    const addItem = () => {\r\n        if (title) {\r\n            props.callBack(title);\r\n        } else {\r\n            setError(true);\r\n        }\r\n        setTitle('');\r\n    }\r\n\r\n    const onChangeSetTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value.trim())\r\n        setError(false)\r\n    }\r\n\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant=\"standard\"\r\n                color={'info'}\r\n                error={error}\r\n                value={title}\r\n                onChange={onChangeSetTitle}\r\n                onKeyPress={onKeyPressAddTask}\r\n                helperText={error ? errorMessage : ' '}\r\n            />\r\n            <IconButton size={'small'} color={'info'} onClick={addItem}><Add/></IconButton>\r\n        </div>\r\n    )\r\n});","import React, {useState, ChangeEvent, memo} from \"react\";\r\nimport {TextField} from \"@mui/material\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    callBack: (title: string) => void\r\n    className?: string\r\n}\r\n\r\nexport const EditableSpan = memo((props: EditableSpanPropsType) => {\r\n\r\n    const [title, setTitle] = useState<string>(props.title);\r\n    const [isEdit, setIsEdit] = useState<boolean>(false);\r\n\r\n    const onDoubleClickHandler = () => {\r\n        setIsEdit(true);\r\n    }\r\n\r\n    const onBlurHandler = () => {\r\n        setIsEdit(false);\r\n        props.callBack(title);\r\n    }\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value.trim());\r\n    }\r\n\r\n    return isEdit\r\n        ? <TextField variant=\"standard\" value={title} autoFocus onBlur={onBlurHandler} onChange={onChangeTitleHandler}/>\r\n        : <span onDoubleClick={onDoubleClickHandler} className={props.className}>{title}</span>\r\n});","import {AddTodolistACType, RemoveTodolistACType, SetToDoListsACType, TasksStateType} from \"./todolists-reducer\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsApi, UpdateTaskType} from \"../../../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../../app/store\";\r\n\r\nexport type UpdateTaskModelType = {\r\n    title?: string,\r\n    description?: string,\r\n    status?: TaskStatuses,\r\n    priority?: TaskPriorities,\r\n    startDate?: string,\r\n    deadline?: string,\r\n}\r\n\r\ntype ActionType = RemoveTaskACType\r\n                | AddTaskACType\r\n                | UpdateTaskACType\r\n                | AddTodolistACType\r\n                | RemoveTodolistACType\r\n                | SetToDoListsACType\r\n                | SetTasksACType;\r\n\r\nexport const tasksReducer = (state: TasksStateType = {}, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId].filter(task => task.id !== action.payload.taskId),\r\n            };\r\n        }\r\n        case 'ADD-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.payload.task.todoListId]: [action.payload.task, ...state[action.payload.task.todoListId]],\r\n            };\r\n        }\r\n        case 'UPDATE-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId].map(task => task.id === action.payload.taskId ? {...task, ...action.payload.model} : task),\r\n            }\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.payload.toDoList.id]: [],\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state}\r\n            delete copyState[action.payload.id]\r\n            return copyState;\r\n        }\r\n        case 'SET-TODOLIST': {\r\n            const copyState = {...state}\r\n            action.payload.toDoLists.forEach((toDoList) => {\r\n                copyState[toDoList.id] = [];\r\n            })\r\n            return copyState;\r\n        }\r\n        case 'SET-TASKS': {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: action.payload.tasks,\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// actions\r\ntype RemoveTaskACType = ReturnType<typeof removeTaskAC>;\r\nexport const removeTaskAC = (todolistId: string, taskId: string) => {\r\n    return {\r\n        type: 'REMOVE-TASK',\r\n        payload: {\r\n            todolistId,\r\n            taskId,\r\n        },\r\n    } as const\r\n}\r\n\r\ntype AddTaskACType = ReturnType<typeof addTaskAC>;\r\nexport const addTaskAC = (task: TaskType) => {\r\n    return {\r\n        type: 'ADD-TASK',\r\n        payload: {\r\n            task,\r\n        },\r\n    } as const\r\n}\r\n\r\ntype UpdateTaskACType = ReturnType<typeof updateTaskAC>;\r\nexport const updateTaskAC = (todolistId: string, taskId: string, model: UpdateTaskModelType) => {\r\n    return {\r\n        type: 'UPDATE-TASK',\r\n        payload: {\r\n            todolistId,\r\n            taskId,\r\n            model,\r\n        },\r\n    } as const\r\n}\r\n\r\ntype SetTasksACType = ReturnType<typeof setTasksAC>\r\nexport const setTasksAC = (todolistId: string, tasks: Array<TaskType>) => {\r\n    return {\r\n        type: 'SET-TASKS',\r\n        payload: {\r\n            todolistId,\r\n            tasks,\r\n        }\r\n    } as const\r\n}\r\n\r\n// thunks\r\nexport const fetchTasks = (toDoListID: string) => (dispatch: Dispatch<ActionType>) => {\r\n    todolistsApi.getTasks(toDoListID)\r\n        .then(({data}) => {\r\n            dispatch(setTasksAC(toDoListID, data.items));\r\n        });\r\n}\r\n\r\nexport const deleteTask = (toDoListID: string, taskID: string) => (dispatch: Dispatch<ActionType>) => {\r\n    todolistsApi.deleteTask(toDoListID, taskID)\r\n        .then((response) => {\r\n            dispatch(removeTaskAC(toDoListID, taskID))\r\n        })\r\n}\r\n\r\nexport const createTask = (toDoListID: string, title: string) => (dispatch: Dispatch<ActionType>) => {\r\n    todolistsApi.createTask(toDoListID, title)\r\n        .then(({data}) => {\r\n            dispatch(addTaskAC(data.data.item));\r\n        });\r\n}\r\n\r\nexport const updateTask = (toDoListID: string, taskID: string, modelTask: UpdateTaskModelType) =>\r\n    (dispatch: Dispatch<ActionType>, getState: () => AppRootStateType) => {\r\n    const state = getState();\r\n    const task = state.tasks[toDoListID].find(task => task.id === taskID);\r\n    if (!task) {\r\n        console.warn('Task is not found');\r\n        return;\r\n    }\r\n\r\n    const updatedTask: UpdateTaskType = {\r\n        title: task.title,\r\n        description: task.description,\r\n        status: task.status,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        deadline: task.deadline,\r\n        ...modelTask,\r\n    }\r\n    todolistsApi.updateTask(toDoListID, taskID, updatedTask)\r\n        .then((response) => {\r\n            dispatch(updateTaskAC(toDoListID, taskID, modelTask));\r\n        });\r\n}","import React, {ChangeEvent, memo} from 'react';\r\nimport {Checkbox, IconButton} from \"@mui/material\";\r\nimport {EditableSpan} from \"../../EditableSpan/EditableSpan\";\r\nimport {DeleteOutline} from \"@mui/icons-material\";\r\nimport {TaskStatuses} from \"../../../api/todolists-api\";\r\n\r\nexport type TaskPropsType = {\r\n    taskId: string,\r\n    title: string,\r\n    status: TaskStatuses,\r\n    changeStatus: (taskId: string, e: ChangeEvent<HTMLInputElement>) => void,\r\n    updateTask: (taskId: string, title: string) => void,\r\n    removeTask: (taskId: string) => void,\r\n}\r\n\r\nexport const Task = memo((props: TaskPropsType) => {\r\n\r\n    //\r\n    // const getSpanClass = (isDone: boolean) => {\r\n    //     return isDone ? 'is-done' : '';\r\n    // }\r\n\r\n    return (\r\n        <div key={props.taskId}>\r\n            <Checkbox\r\n                checked={props.status === TaskStatuses.Completed}\r\n                onChange={(e) => props.changeStatus(props.taskId, e)}\r\n            />\r\n            <EditableSpan callBack={(title) => props.updateTask(props.taskId, title)}\r\n                          title={props.title}/>\r\n            <IconButton onClick={() => props.removeTask(props.taskId)}><DeleteOutline /></IconButton>\r\n        </div>\r\n    );\r\n});","import React, {ChangeEvent, memo, useCallback, useEffect} from \"react\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {InputWithButton} from \"../Input/InputWithButton\";\r\nimport {DeleteOutline} from \"@mui/icons-material\";\r\nimport {Button, ButtonGroup, IconButton} from \"@mui/material\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {\r\n    createTask, deleteTask,\r\n    fetchTasks, updateTask,\r\n} from \"./reducers/tasks-reducer\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {FilterValuesType} from \"./reducers/todolists-reducer\";\r\nimport {TaskStatuses, TaskType} from \"../../api/todolists-api\";\r\n\r\ntype ToDoListPropsTypes = {\r\n    toDoListID: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    changeFilter: (toDoListID: string, filter: FilterValuesType) => void\r\n    removeToDoList: (toDoListID: string) => void\r\n    updateToDoListTitle: (toDoListID: string, title: string) => void\r\n}\r\n\r\nexport const ToDoList = memo((props: ToDoListPropsTypes) => {\r\n    const dispatch = useDispatch();\r\n    const tasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[props.toDoListID]);\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasks(props.toDoListID));\r\n    }, []);\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        dispatch(createTask(props.toDoListID, title));\r\n    }, [dispatch, props.toDoListID]);\r\n\r\n    const removeTask = useCallback((taskID: string) => {\r\n        dispatch(deleteTask(props.toDoListID, taskID));\r\n    }, [dispatch, props.toDoListID]);\r\n\r\n    const updateTaskTitle = useCallback((taskID: string, title: string) => {\r\n        dispatch(updateTask(props.toDoListID, taskID, {title}))\r\n    }, [dispatch, props.toDoListID]);\r\n\r\n    const changeStatus = useCallback((taskID: string, e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(updateTask(props.toDoListID, taskID, e.currentTarget.checked ? {status: TaskStatuses.Completed} : {status: TaskStatuses.New}))\r\n    }, [dispatch, props.toDoListID]);\r\n\r\n\r\n    const onClickFilterAllTasks = useCallback(() => props.changeFilter(props.toDoListID, 'all'), [props.toDoListID, props.changeFilter]);\r\n    const onClickFilterActiveTasks = useCallback(() => props.changeFilter(props.toDoListID, 'active'), [props.toDoListID, props.changeFilter]);\r\n    const onClickFilterCompletedTasks = useCallback(() => props.changeFilter(props.toDoListID, 'completed'), [props.toDoListID, props.changeFilter]);\r\n\r\n    const onClickRemoveToDoList = () => props.removeToDoList(props.toDoListID);\r\n    const updateToDoListTitle = useCallback((title: string) => props.updateToDoListTitle(props.toDoListID, title), [props.updateToDoListTitle, props.toDoListID]);\r\n\r\n    let tasksForTodolist = tasks;\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n    const taskList = tasksForTodolist.map((t: TaskType) => {\r\n        return (\r\n            <Task key={t.id} taskId={t.id} title={t.title} status={t.status} changeStatus={changeStatus} updateTask={updateTaskTitle} removeTask={removeTask}/>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} callBack={updateToDoListTitle}/>\r\n                <IconButton onClick={onClickRemoveToDoList}><DeleteOutline /></IconButton>\r\n            </h3>\r\n            <InputWithButton callBack={addTask}/>\r\n            <div>\r\n                {taskList}\r\n            </div>\r\n            <ButtonGroup>\r\n                <Button\r\n                    color={'secondary'}\r\n                    variant={props.filter === 'all' ? 'contained' : 'outlined'}\r\n                    onClick={onClickFilterAllTasks}\r\n                >\r\n                    All\r\n                </Button>\r\n                <Button\r\n                    color={'primary'}\r\n                    variant={props.filter === 'active' ? 'contained' : 'outlined'}\r\n                    onClick={onClickFilterActiveTasks}\r\n                >\r\n                    Active\r\n                </Button>\r\n                <Button\r\n                    color={'success'}\r\n                    variant={props.filter === 'completed' ? 'contained' : 'outlined'}\r\n                    onClick={onClickFilterCompletedTasks}\r\n                >\r\n                    Completed\r\n                </Button>\r\n            </ButtonGroup>\r\n        </div>\r\n    )\r\n});","import React, {useCallback, useEffect} from 'react';\r\nimport {Grid, Paper} from \"@mui/material\";\r\nimport {InputWithButton} from \"../Input/InputWithButton\";\r\nimport {ToDoList} from \"../ToDoList/ToDoList\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {\r\n    changeTodolistFilterAC, changeToDoListTitle, createToDoList, deleteToDoList,\r\n    fetchToDoLists,\r\n    FilterValuesType,\r\n    ToDoListDomainType\r\n} from \"../ToDoList/reducers/todolists-reducer\";\r\n\r\nexport const ToDoListsList: React.FC = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const toDoLists = useSelector<AppRootStateType, Array<ToDoListDomainType>>(state => state.toDoLists);\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchToDoLists());\r\n    }, []);\r\n\r\n    const changeFilter = useCallback((toDoListID: string, filter: FilterValuesType) => {\r\n        dispatch(changeTodolistFilterAC(toDoListID, filter));\r\n    }, [dispatch]);\r\n\r\n    const removeToDoList = useCallback((toDoListID: string) => {\r\n        dispatch(deleteToDoList(toDoListID));\r\n    }, [dispatch]);\r\n\r\n    const updateToDoListTitle = useCallback((toDoListID: string, title: string) => {\r\n        dispatch(changeToDoListTitle(toDoListID, title));\r\n    }, [dispatch]);\r\n\r\n    const addToDoList = useCallback((title: string) => {\r\n        dispatch(createToDoList(title));\r\n    }, [dispatch]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '20px'}}>\r\n                <InputWithButton callBack={addToDoList}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {toDoLists.map(list => {\r\n\r\n                    return (\r\n                        <Grid key={list.id} item>\r\n                            <Paper style={{padding: '10px'}}>\r\n                                <ToDoList\r\n                                    key={list.id}\r\n                                    toDoListID={list.id}\r\n                                    title={list.title}\r\n                                    filter={list.filter}\r\n                                    changeFilter={changeFilter}\r\n                                    removeToDoList={removeToDoList}\r\n                                    updateToDoListTitle={updateToDoListTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    )\r\n                })}\r\n            </Grid>\r\n        </>\r\n    );\r\n};","import {TaskType, todolistsApi, ToDoListType} from \"../../../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\nexport type ToDoListDomainType = ToDoListType & {\r\n    filter: FilterValuesType,\r\n}\r\n\r\ntype ActionType = RemoveTodolistACType\r\n                | AddTodolistACType\r\n                | ChangeTodolistTitleACType\r\n                | ChangeTodolistFilterACType\r\n                | SetToDoListsACType;\r\n\r\nexport const todolistsReducer = (state: Array<ToDoListDomainType> = [], action: ActionType): Array<ToDoListDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':{\r\n            return state.filter(tl => tl.id !== action.payload.id);\r\n        }\r\n        case 'ADD-TODOLIST':{\r\n            return [{\r\n                ...action.payload.toDoList, filter: 'all'},\r\n                ...state,\r\n            ];\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            return state.map(toDoList => toDoList.id === action.payload.id ? {...toDoList, title: action.payload.title} : toDoList);\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            return state.map(toDoList => toDoList.id === action.payload.id ? {...toDoList, filter: action.payload.filter} : toDoList);\r\n        }\r\n        case 'SET-TODOLIST': {\r\n            return action.payload.toDoLists.map(toDoList => ({...toDoList, filter: \"all\"}) )\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// actions\r\nexport type RemoveTodolistACType = ReturnType<typeof removeTodolistAC>\r\nexport const removeTodolistAC = (id: string) => {\r\n    return {\r\n        type: 'REMOVE-TODOLIST',\r\n        payload: {\r\n            id,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport type AddTodolistACType = ReturnType<typeof addTodolistAC>\r\nexport const addTodolistAC = (toDoList: ToDoListType) => {\r\n    return {\r\n        type: 'ADD-TODOLIST',\r\n        payload: {\r\n            toDoList,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport type ChangeTodolistTitleACType = ReturnType<typeof changeTodolistTitleAC>\r\nexport const changeTodolistTitleAC = (id: string, title: string) => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-TITLE',\r\n        payload: {\r\n            id,\r\n            title,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport type ChangeTodolistFilterACType = ReturnType<typeof changeTodolistFilterAC>\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-FILTER',\r\n        payload: {\r\n            id,\r\n            filter,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport type SetToDoListsACType = ReturnType<typeof setToDOListsAC>\r\nexport const setToDOListsAC = (toDoLists: Array<ToDoListType>) => {\r\n    return {\r\n        type: 'SET-TODOLIST',\r\n        payload: {\r\n            toDoLists,\r\n        },\r\n    } as const\r\n}\r\n\r\n// thunks\r\nexport const fetchToDoLists = () => (dispatch: Dispatch<ActionType>) => {\r\n    todolistsApi.getToDoLists()\r\n        .then(({data}) => {\r\n            dispatch(setToDOListsAC(data));\r\n        })\r\n}\r\n\r\nexport const deleteToDoList = (toDoListID: string) => (dispatch: Dispatch<ActionType>) => {\r\n    todolistsApi.deleteToDoList(toDoListID)\r\n        .then((response) => {\r\n            dispatch(removeTodolistAC(toDoListID));\r\n        });\r\n}\r\n\r\nexport const createToDoList = (title: string) => (dispatch: Dispatch<ActionType>) => {\r\n    todolistsApi.createToDoList(title)\r\n        .then(({data}) => {\r\n            dispatch(addTodolistAC(data.data.item));\r\n        });\r\n}\r\n\r\nexport const changeToDoListTitle = (toDoListID: string, title: string) => (dispatch: Dispatch<ActionType>) => {\r\n    todolistsApi.updateToDoList(toDoListID, title)\r\n        .then((response) => {\r\n            dispatch(changeTodolistTitleAC(toDoListID, title));\r\n        });\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {AppBar, Button, Container, IconButton, Toolbar, Typography} from \"@mui/material\";\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ToDoListsList} from \"../components/ToDoListsList/ToDoListsList\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{mr: 2}}\r\n                    >\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container>\r\n                <ToDoListsList/>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {tasksReducer} from \"../components/ToDoList/reducers/tasks-reducer\";\r\nimport {todolistsReducer} from \"../components/ToDoList/reducers/todolists-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nconst rootReducer = combineReducers({\r\n    toDoLists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}