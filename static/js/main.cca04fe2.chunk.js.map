{"version":3,"sources":["components/EditableSpan/EditableSpan.tsx","components/Input/InputWithButton.tsx","ToDoList.tsx","state/tasks-reducer.ts","App.tsx","state/todolists-reducer.ts","serviceWorker.ts","state/store.ts","index.tsx"],"names":["EditableSpan","props","useState","title","setTitle","isEdit","setIsEdit","TextField","variant","value","autoFocus","onBlur","callBack","onChange","e","currentTarget","trim","onDoubleClick","className","InputWithButton","error","setError","errorMessage","style","color","addItem","onKeyPress","key","helperText","IconButton","size","onClick","Add","ToDoList","dispatch","useDispatch","tasks","useSelector","state","toDoListID","tasksForTodolist","filter","t","isDone","taskList","map","id","Checkbox","checked","taskID","todolistId","taskId","type","payload","changeStatus","changeTaskTitleAC","updateTask","DeleteOutline","updateToDoListTitle","removeToDoList","addTaskAC","ButtonGroup","Button","changeFilter","App","toDoLists","changeTodolistFilterAC","changeTodolistTitleAC","AppBar","position","Toolbar","edge","aria-label","sx","mr","Menu","Typography","component","flexGrow","Container","Grid","container","padding","v1","addTodolistAC","spacing","list","item","Paper","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","tl","newTodolist","m","task","copyState","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.cca04fe2.chunk.js","sourcesContent":["import React, {useState, ChangeEvent} from \"react\";\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    callBack: (title: string) => void\r\n    className?: string\r\n}\r\n\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n\r\n    const [title, setTitle] = useState<string>(props.title);\r\n    const [isEdit, setIsEdit] = useState<boolean>(false);\r\n\r\n    const onDoubleClickHandler = () => {\r\n        setIsEdit(true);\r\n    }\r\n\r\n    const onBlurHandler = () => {\r\n        setIsEdit(false);\r\n        props.callBack(title);\r\n    }\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value.trim());\r\n    }\r\n\r\n    return isEdit\r\n        ? <TextField variant=\"standard\" value={title} autoFocus onBlur={onBlurHandler} onChange={onChangeTitleHandler}/>\r\n        : <span onDoubleClick={onDoubleClickHandler} className={props.className}>{title}</span>\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport {Add} from \"@mui/icons-material\";\r\n\r\ntype InputPropsType = {\r\n    callBack: (title:string) => void\r\n}\r\n\r\nexport const InputWithButton = (props: InputPropsType) => {\r\n\r\n    const [title, setTitle] = useState('');\r\n    const [error, setError] = useState<boolean>(false);\r\n\r\n    const errorMessage = error && <div style={{color: 'red'}}>Title is required</div>;\r\n\r\n    const addItem = () => {\r\n        if (title) {\r\n            props.callBack(title);\r\n        } else {\r\n            setError(true);\r\n        }\r\n        setTitle('');\r\n    }\r\n\r\n    const onChangeSetTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value.trim())\r\n        setError(false)\r\n    }\r\n\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant=\"standard\"\r\n                color={'info'}\r\n                error={error}\r\n                value={title}\r\n                onChange={onChangeSetTitle}\r\n                onKeyPress={onKeyPressAddTask}\r\n                helperText={error ? errorMessage : ' '}\r\n            />\r\n            <IconButton size={'small'} color={'info'} onClick={addItem}><Add/></IconButton>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\nimport {EditableSpan} from \"./components/EditableSpan/EditableSpan\";\r\nimport {InputWithButton} from \"./components/Input/InputWithButton\";\r\nimport {DeleteOutline} from \"@mui/icons-material\";\r\nimport {Button, ButtonGroup, Checkbox, IconButton} from \"@mui/material\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\r\n\r\ntype ToDoListPropsTypes = {\r\n    toDoListID: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    changeFilter: (toDoListID: string, filter: FilterValuesType) => void\r\n    removeToDoList: (toDoListID: string) => void\r\n    updateToDoListTitle: (toDoListID: string, title: string) => void\r\n}\r\n\r\nexport function ToDoList(props: ToDoListPropsTypes) {\r\n    const dispatch = useDispatch();\r\n    const tasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[props.toDoListID]);\r\n\r\n    const addTask = (title: string) => dispatch(addTaskAC(props.toDoListID, title));\r\n    const removeTask = (taskID: string) => dispatch(removeTaskAC(props.toDoListID, taskID));\r\n    const updateTask = (taskID: string, title: string) => dispatch(changeTaskTitleAC(props.toDoListID, taskID, title));\r\n    const changeStatus = (taskID: string, e: ChangeEvent<HTMLInputElement>) => dispatch(changeTaskStatusAC(props.toDoListID, taskID, e.currentTarget.checked));\r\n\r\n\r\n    const onClickFilterAllTasks = () => props.changeFilter(props.toDoListID, 'all');\r\n    const onClickFilterActiveTasks = () => props.changeFilter(props.toDoListID, 'active');\r\n    const onClickFilterCompletedTasks = () => props.changeFilter(props.toDoListID, 'completed');\r\n\r\n    const onClickRemoveToDoList = () => props.removeToDoList(props.toDoListID);\r\n    const updateToDoListTitle = (title: string) => props.updateToDoListTitle(props.toDoListID, title);\r\n\r\n    const getSpanClass = (isDone: boolean) => {\r\n        return isDone ? 'is-done' : '';\r\n    }\r\n    let tasksForTodolist = tasks;\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = tasks.filter(t => !t.isDone);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = tasks.filter(t => t.isDone);\r\n    }\r\n    const taskList = tasksForTodolist.map((t: TaskType) => {\r\n        return (\r\n            <div key={t.id}>\r\n                <Checkbox\r\n                    checked={t.isDone}\r\n                    onChange={(e) => changeStatus(t.id, e)}\r\n                />\r\n                <EditableSpan callBack={(title) => updateTask(t.id, title)} className={getSpanClass(t.isDone)}\r\n                              title={t.title}/>\r\n                <IconButton onClick={() => removeTask(t.id)}><DeleteOutline /></IconButton>\r\n            </div>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} callBack={updateToDoListTitle}/>\r\n                <IconButton onClick={onClickRemoveToDoList}><DeleteOutline /></IconButton>\r\n            </h3>\r\n            <InputWithButton callBack={addTask}/>\r\n            <div>\r\n                {taskList}\r\n            </div>\r\n            <ButtonGroup>\r\n                <Button\r\n                    color={'secondary'}\r\n                    variant={props.filter === 'all' ? 'contained' : 'outlined'}\r\n                    onClick={onClickFilterAllTasks}\r\n                >\r\n                    All\r\n                </Button>\r\n                <Button\r\n                    color={'primary'}\r\n                    variant={props.filter === 'active' ? 'contained' : 'outlined'}\r\n                    onClick={onClickFilterActiveTasks}\r\n                >\r\n                    Active\r\n                </Button>\r\n                <Button\r\n                    color={'success'}\r\n                    variant={props.filter === 'completed' ? 'contained' : 'outlined'}\r\n                    onClick={onClickFilterCompletedTasks}\r\n                >\r\n                    Completed\r\n                </Button>\r\n            </ButtonGroup>\r\n        </div>\r\n    )\r\n}","import {TasksStateType} from '../App';\r\nimport {v1} from \"uuid\";\r\nimport {AddTodolistACType, RemoveTodolistACType} from \"./todolists-reducer\";\r\n\r\nexport const tasksReducer = (state: TasksStateType = {}, action: GenerationType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            return {...state, [action.payload.todolistId]: state[action.payload.todolistId].filter(task => task.id !== action.payload.taskId)}\r\n        }\r\n        case 'ADD-TASK': {\r\n            return {...state, [action.payload.todolistId]: [{id: v1(), title: action.payload.title, isDone: false}, ...state[action.payload.todolistId]]}\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            return {...state, [action.payload.todolistId]: state[action.payload.todolistId].map(task => task.id === action.payload.taskId ? {...task, isDone: action.payload.isDone} : task)}\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            return {...state, [action.payload.todolistId]: state[action.payload.todolistId].map(task => task.id === action.payload.taskId ? {...task, title: action.payload.title} : task)}\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {...state, [action.payload.todolistId]: []}\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state}\r\n            delete copyState[action.payload.id]\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype GenerationType = RemoveTaskACType | AddTaskACType | ChangeTaskStatusACType | ChangeTaskTitleACType | AddTodolistACType | RemoveTodolistACType;\r\n\r\ntype RemoveTaskACType = ReturnType<typeof removeTaskAC>;\r\nexport const removeTaskAC = (todolistId: string, taskId: string) => {\r\n    return {\r\n        type: 'REMOVE-TASK',\r\n        payload: {todolistId, taskId},\r\n    } as const\r\n}\r\n\r\ntype AddTaskACType = ReturnType<typeof addTaskAC>;\r\nexport const addTaskAC = (todolistId: string, title: string) => {\r\n    return {\r\n        type: 'ADD-TASK',\r\n        payload: {todolistId, title},\r\n    } as const\r\n}\r\n\r\ntype ChangeTaskStatusACType = ReturnType<typeof changeTaskStatusAC>;\r\nexport const changeTaskStatusAC = (todolistId: string, taskId: string, isDone: boolean) => {\r\n    return {\r\n        type: 'CHANGE-TASK-STATUS',\r\n        payload: {todolistId, taskId, isDone},\r\n    } as const\r\n}\r\n\r\ntype ChangeTaskTitleACType = ReturnType<typeof changeTaskTitleAC>;\r\nexport const changeTaskTitleAC = (todolistId: string, taskId: string, title: string) => {\r\n    return {\r\n        type: 'CHANGE-TASK-TITLE',\r\n        payload: {todolistId, taskId, title}\r\n    } as const\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {ToDoList} from \"./ToDoList\";\r\nimport {InputWithButton} from \"./components/Input/InputWithButton\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@mui/material\";\r\nimport {Menu} from '@mui/icons-material';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC\r\n} from \"./state/todolists-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type ToDoListsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\nfunction App() {\r\n\r\n    const dispatch = useDispatch();\r\n    const toDoLists = useSelector<AppRootStateType, Array<ToDoListsType>>(state => state.toDoLists);\r\n\r\n\r\n    const changeFilter = (toDoListID: string, filter: FilterValuesType) => {\r\n        dispatch(changeTodolistFilterAC(toDoListID, filter));\r\n    }\r\n\r\n    const removeToDoList = (toDoListID: string) => {\r\n        dispatch(removeTodolistAC(toDoListID));\r\n    }\r\n\r\n    const updateToDoListTitle = (toDoListID: string, title: string) => {\r\n        dispatch(changeTodolistTitleAC(toDoListID, title));\r\n    }\r\n\r\n    const addToDoList = (title: string) => {\r\n        dispatch(addTodolistAC(title));\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{mr: 2}}\r\n                    >\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container>\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <InputWithButton callBack={addToDoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {toDoLists.map(list => {\r\n\r\n\r\n\r\n                        return (\r\n                            <Grid key={list.id} item>\r\n                                <Paper style={{padding: '10px'}}>\r\n                                    <ToDoList\r\n                                        key={list.id}\r\n                                        toDoListID={list.id}\r\n                                        title={list.title}\r\n                                        filter={list.filter}\r\n                                        changeFilter={changeFilter}\r\n                                        removeToDoList={removeToDoList}\r\n                                        updateToDoListTitle={updateToDoListTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {FilterValuesType, ToDoListsType} from '../App';\r\nimport {v1} from 'uuid';\r\n\r\nexport const todolistsReducer = (state: Array<ToDoListsType> = [], action: GeneralTypeForAC) => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.payload.id);\r\n        case 'ADD-TODOLIST':{\r\n            const newTodolist:ToDoListsType = {id: action.payload.todolistId, title: action.payload.title, filter: 'all'}\r\n            return [newTodolist, ...state];\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            return state.map(m => m.id === action.payload.id ? {...m, title: action.payload.title} : m);\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            return state.map(m => m.id === action.payload.id ? {...m, filter: action.payload.filter} : m);\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype GeneralTypeForAC = RemoveTodolistACType | AddTodolistACType | ChangeTodolistTitleACType | ChangeTodolistFilterACType;\r\n\r\nexport type RemoveTodolistACType = ReturnType<typeof removeTodolistAC>\r\nexport const removeTodolistAC = (id: string) => {\r\n    return {\r\n        type: 'REMOVE-TODOLIST',\r\n        payload: {id},\r\n    } as const\r\n}\r\n\r\nexport type AddTodolistACType = ReturnType<typeof addTodolistAC>\r\nexport const addTodolistAC = (title: string) => {\r\n    return {\r\n        type: 'ADD-TODOLIST',\r\n        payload: {title, todolistId: v1()},\r\n    } as const\r\n}\r\n\r\nexport type ChangeTodolistTitleACType = ReturnType<typeof changeTodolistTitleAC>\r\nexport const changeTodolistTitleAC = (id: string, title: string) => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-TITLE',\r\n        payload: {id, title},\r\n    } as const\r\n}\r\n\r\nexport type ChangeTodolistFilterACType = ReturnType<typeof changeTodolistFilterAC>\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-FILTER',\r\n        payload: {id, filter},\r\n    } as const\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\nimport {todolistsReducer} from \"./todolists-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    toDoLists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\nexport const store = createStore(rootReducer);\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}