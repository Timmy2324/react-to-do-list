{"version":3,"sources":["components/ToDoList/ToDoList.module.css","api/todolists-api.ts","components/Input/InputWithButton.tsx","components/EditableSpan/EditableSpan.tsx","features/Auth/reducers/auth-reducer.ts","app/reducers/app-reducer.ts","utils/error-utils.ts","components/ToDoList/reducers/todolists-reducer.ts","components/ToDoList/reducers/tasks-reducer.ts","components/ToDoList/Task/Task.tsx","components/ToDoList/ToDoList.tsx","features/ToDoListsList/ToDoListsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Auth/Auth.tsx","app/App.tsx","serviceWorker.ts","app/store.ts","index.tsx","components/EditableSpan/EditableSpan.module.css","components/ToDoList/Task/Task.module.css"],"names":["module","exports","TaskStatuses","TaskPriorities","InputWithButton","memo","props","useState","title","setTitle","error","setError","errorMessage","style","color","addItem","callBack","trim","display","justifyContent","alignItems","TextField","fullWidth","variant","value","onChange","e","currentTarget","onKeyPress","key","helperText","disabled","placeholder","autoComplete","IconButton","size","onClick","Add","EditableSpan","isEdit","setIsEdit","className","s","text","autoFocus","onBlur","onDoubleClick","AuthActionType","instance","axios","create","baseURL","withCredentials","headers","todolistsApi","get","post","toDoListID","delete","put","taskID","taskBody","authAPI","data","AppActionType","initialState","isLoggedIn","setIsLoggedIn","type","SET_IS_LOGGED_IN","payload","status","isInitialized","setAppStatus","SET_STATUS","setAppError","SET_ERROR","initializeApp","dispatch","then","resultCode","SET_IS_INITIALIZED","handleServerAppError","messages","length","changeTodolistEntityStatusAC","handleServerNetworkError","message","id","updateTask","modelTask","getState","task","tasks","find","console","warn","updatedTask","description","priority","startDate","deadline","todolistId","taskId","model","catch","Task","taskWrap","textWrap","Checkbox","checked","Completed","changeStatus","removeTask","DeleteOutline","ToDoList","demo","useDispatch","useSelector","state","toDoList","entityStatus","useEffect","items","addTask","useCallback","item","createTask","deleteTask","updateTaskTitle","New","onClickFilterAllTasks","changeFilter","onClickFilterActiveTasks","onClickFilterCompletedTasks","updateToDoListTitle","tasksForTodolist","filter","t","taskList","map","Paper","padding","maxWidth","toDoListTitle","removeToDoList","ButtonGroup","Button","ToDoListsList","toDoLists","auth","changeTodolistFilterAC","log","deleteToDoList","changeTodolistTitleAC","changeToDoListTitle","addToDoList","createToDoList","Grid","container","paddingTop","spacing","list","to","Alert","React","ref","elevation","ErrorSnackbar","app","isOpen","handleClose","event","reason","Stack","sx","width","Snackbar","open","autoHideDuration","onClose","severity","Auth","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","label","margin","getFieldProps","errors","FormControlLabel","control","App","isInitialised","logOutHandler","AppBar","position","Toolbar","edge","mr","Menu","Typography","component","flexGrow","height","LinearProgress","Container","path","element","marginTop","textAlign","CircularProgress","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","tl","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dc0d2de9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"toDoListTitle\":\"ToDoList_toDoListTitle__3bB3D\"};","import axios from \"axios\";\r\n\r\n// types\r\nexport type ToDoListType = {\r\n    id: string,\r\n    title: string,\r\n    addedDate: string,\r\n    order: number,\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string,\r\n    title: string,\r\n    status: TaskStatuses,\r\n    priority: TaskPriorities,\r\n    startDate: string,\r\n    deadline: string,\r\n    id: string,\r\n    todoListId: string,\r\n    order: number,\r\n    addedDate: string,\r\n}\r\n\r\nexport type ResponseType<T = {}> = {\r\n    resultCode: number,\r\n    messages: Array<string>,\r\n    data: T,\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    items: TaskType[],\r\n    error: string | null,\r\n    totalCount: number,\r\n}\r\n\r\nexport type UpdateTaskType = {\r\n    title: string,\r\n    description: string,\r\n    status: TaskStatuses,\r\n    priority: TaskPriorities,\r\n    startDate: string,\r\n    deadline: string,\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha?: string,\r\n}\r\n\r\n//api\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"642ef21e-b6f0-4355-8bfb-f882a3b3360e\",\r\n    },\r\n\r\n});\r\n\r\nexport const todolistsApi = {\r\n    getToDoLists() {\r\n        return instance.get<Array<ToDoListType>>(`todo-lists/`);\r\n    },\r\n    createToDoList(title: string) {\r\n        return instance.post<ResponseType<{item: ToDoListType}>>(`todo-lists/`, {title});\r\n    },\r\n    deleteToDoList(toDoListID: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${toDoListID}`);\r\n    },\r\n    updateToDoList(toDoListID: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${toDoListID}`, {title});\r\n    },\r\n    getTasks(toDoListID: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${toDoListID}/tasks`);\r\n    },\r\n    deleteTask(toDoListID: string, taskID: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${toDoListID}/tasks/${taskID}`);\r\n    },\r\n    createTask(toDoListID: string, title: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${toDoListID}/tasks`, {title});\r\n    },\r\n    updateTask(toDoListID: string, taskID: string, taskBody: UpdateTaskType) {\r\n        return instance.put<ResponseType>(`todo-lists/${toDoListID}/tasks/${taskID}`, {...taskBody});\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n    },\r\n    logOut() {\r\n        return instance.delete<ResponseType>('auth/login');\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>('auth/me');\r\n    },\r\n}","import React, {ChangeEvent, KeyboardEvent, memo, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport {Add} from \"@mui/icons-material\";\r\n\r\nexport type InputPropsType = {\r\n    callBack: (title:string) => void\r\n    disabled?: boolean\r\n    placeholder?: string\r\n}\r\n\r\nexport const InputWithButton = memo((props: InputPropsType) => {\r\n\r\n    const [title, setTitle] = useState('');\r\n    const [error, setError] = useState<boolean>(false);\r\n\r\n    const errorMessage = error && <div style={{color: 'red'}}>Title is required</div>;\r\n\r\n    const addItem = () => {\r\n        if (title) {\r\n            props.callBack(title.trim());\r\n        } else {\r\n            setError(true);\r\n        }\r\n        setTitle('');\r\n    }\r\n\r\n    const onChangeSetTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{display: 'flex', justifyContent: 'space-between', alignItems: 'start'}}>\r\n            <TextField\r\n                fullWidth\r\n                variant=\"standard\"\r\n                color={'info'}\r\n                error={error}\r\n                value={title}\r\n                onChange={onChangeSetTitle}\r\n                onKeyPress={onKeyPressAddTask}\r\n                helperText={error ? errorMessage : ' '}\r\n                disabled={props.disabled ? props.disabled : false}\r\n                placeholder={props.placeholder}\r\n                autoComplete='off'\r\n            />\r\n            <IconButton size={'small'} color={'info'} onClick={addItem} disabled={props.disabled ? props.disabled : false}>\r\n                <Add/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n});","import React, {useState, ChangeEvent, memo} from \"react\";\r\nimport {TextField} from \"@mui/material\";\r\nimport s from './EditableSpan.module.css';\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    callBack: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = memo((props: EditableSpanPropsType) => {\r\n\r\n    const [title, setTitle] = useState<string>(props.title);\r\n    const [isEdit, setIsEdit] = useState<boolean>(false);\r\n\r\n    const onDoubleClickHandler = () => {\r\n        if (props.disabled) {\r\n            return;\r\n        }\r\n        setIsEdit(true);\r\n        setTitle(props.title);\r\n    }\r\n\r\n    const onBlurHandler = () => {\r\n        setIsEdit(false);\r\n        props.callBack(title.trim());\r\n    }\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    }\r\n\r\n    return isEdit\r\n        ? <TextField fullWidth className={s.text} variant=\"standard\" value={title} autoFocus onBlur={onBlurHandler} onChange={onChangeTitleHandler}/>\r\n        : <span onDoubleClick={onDoubleClickHandler} className={s.text}>{props.title}</span>\r\n});","import {Dispatch} from \"redux\";\r\nimport {setAppError, SetAppErrorType, setAppStatus, SetAppStatusType} from \"../../../app/reducers/app-reducer\";\r\nimport {authAPI, LoginParamsType} from \"../../../api/todolists-api\";\r\n\r\nenum AuthActionType {\r\n    SET_IS_LOGGED_IN = 'Login/SET-IS-LOGGED-IN',\r\n}\r\n\r\nexport type InitialStateType = {\r\n    isLoggedIn: boolean\r\n}\r\n\r\ntype ActionType = SetIsLoggedInType;\r\n\r\ntype ThunkDispatch = Dispatch<ActionType | SetAppStatusType | SetAppErrorType>;\r\n\r\nconst initialState: InitialStateType = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case AuthActionType.SET_IS_LOGGED_IN: {\r\n            return {...state, ...action.payload}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// actions\r\nexport type SetIsLoggedInType = ReturnType<typeof setIsLoggedIn>\r\nexport const setIsLoggedIn = (isLoggedIn: boolean) => {\r\n    return {\r\n        type: AuthActionType.SET_IS_LOGGED_IN,\r\n        payload: {\r\n            isLoggedIn,\r\n        },\r\n    } as const\r\n}\r\n\r\n// thunks\r\nexport const login = (data: LoginParamsType) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatus('loading'));\r\n    authAPI.login(data)\r\n        .then(({data}) => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(setIsLoggedIn(true));\r\n                dispatch(setAppStatus('succeeded'));\r\n            } else {\r\n                dispatch(setAppError(data.messages[0]));\r\n                dispatch(setAppStatus('failed'));\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            dispatch(setAppError(error.message ? error.message : 'Some error'));\r\n            dispatch(setAppStatus('failed'));\r\n        })\r\n}\r\n\r\nexport const logOut = () => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatus('loading'));\r\n    authAPI.logOut()\r\n        .then(({data}) => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(setIsLoggedIn(false));\r\n                dispatch(setAppStatus('succeeded'));\r\n            } else {\r\n                dispatch(setAppError(data.messages[0]));\r\n                dispatch(setAppStatus('failed'));\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            dispatch(setAppError(error.message ? error.message : 'Some error'));\r\n            dispatch(setAppStatus('failed'));\r\n        })\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../../api/todolists-api\";\r\nimport {setIsLoggedIn, SetIsLoggedInType} from \"../../features/Auth/reducers/auth-reducer\";\r\n\r\nenum AppActionType {\r\n    SET_STATUS = 'APP/SET-STATUS',\r\n    SET_ERROR = 'APP/SET-ERROR',\r\n    SET_IS_INITIALIZED = 'APP/SET-IS-INITIALIZED',\r\n}\r\n\r\nexport type InitialAppStateType = {\r\n    status: StatusType,\r\n    error: string | null,\r\n    isInitialized: boolean,\r\n}\r\n\r\nconst initialState: InitialAppStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false,\r\n}\r\n\r\nexport type StatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\ntype ActionType = SetAppStatusType | SetAppErrorType | SetAppInitialized;\r\n\r\nexport const appReducer = (state: InitialAppStateType = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case AppActionType.SET_STATUS:\r\n        case AppActionType.SET_ERROR:\r\n        case AppActionType.SET_IS_INITIALIZED:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type SetAppStatusType = ReturnType<typeof setAppStatus>\r\nexport const setAppStatus = (status: StatusType) => {\r\n    return {\r\n        type: AppActionType.SET_STATUS,\r\n        payload: {\r\n            status,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport type SetAppErrorType = ReturnType<typeof setAppError>\r\nexport const setAppError = (error: string | null) => {\r\n    return {\r\n        type: AppActionType.SET_ERROR,\r\n        payload: {\r\n            error,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport type SetAppInitialized = ReturnType<typeof setAppInitialized>\r\nexport const setAppInitialized = (isInitialized: boolean) => {\r\n    return {\r\n        type: AppActionType.SET_IS_INITIALIZED,\r\n        payload: {\r\n            isInitialized,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: Dispatch<ActionType | SetIsLoggedInType>) => {\r\n    authAPI.me()\r\n        .then(({data}) => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(setIsLoggedIn(true));\r\n            } else {\r\n\r\n            }\r\n            dispatch(setAppInitialized(true));\r\n        })\r\n}","import {setAppError, SetAppErrorType, setAppStatus, SetAppStatusType} from \"../app/reducers/app-reducer\";\r\nimport {ResponseType} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AxiosError} from \"axios\";\r\nimport {\r\n    changeTodolistEntityStatusAC,\r\n    ChangeTodolistEntityStatusACType\r\n} from \"../components/ToDoList/reducers/todolists-reducer\";\r\n\r\ntype ErrorDispatchType = Dispatch<SetAppStatusType | SetAppErrorType | ChangeTodolistEntityStatusACType>;\r\n\r\nexport const handleServerAppError = <T>(toDoListID: string, data: ResponseType<T>, dispatch: ErrorDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppError(data.messages[0]));\r\n    } else {\r\n        dispatch(setAppError('some error occurred'));\r\n    }\r\n    dispatch(setAppStatus('failed'));\r\n    dispatch(changeTodolistEntityStatusAC(toDoListID,'failed'));\r\n}\r\n\r\nexport const handleServerNetworkError = (toDoListID: string, error: AxiosError, dispatch: ErrorDispatchType) => {\r\n    dispatch(setAppError(error.message ? error.message : 'Some error'));\r\n    dispatch(setAppStatus('failed'));\r\n    dispatch(changeTodolistEntityStatusAC(toDoListID,'failed'));\r\n}","import {TaskType, todolistsApi, ToDoListType} from \"../../../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {\r\n    setAppError,\r\n    SetAppErrorType,\r\n    setAppStatus,\r\n    SetAppStatusType,\r\n    StatusType,\r\n} from \"../../../app/reducers/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/error-utils\";\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\nexport type ToDoListDomainType = ToDoListType & {\r\n    filter: FilterValuesType,\r\n    entityStatus: StatusType,\r\n}\r\n\r\ntype ActionType = RemoveTodolistACType\r\n                | AddTodolistACType\r\n                | ChangeTodolistTitleACType\r\n                | ChangeTodolistFilterACType\r\n                | SetToDoListsACType\r\n                | ChangeTodolistEntityStatusACType;\r\n\r\ntype ThunkDispatch = Dispatch<ActionType | SetAppStatusType | SetAppErrorType>;\r\n\r\nexport const todolistsReducer = (state: Array<ToDoListDomainType> = [], action: ActionType): Array<ToDoListDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':{\r\n            return state.filter(tl => tl.id !== action.payload.id);\r\n        }\r\n        case 'ADD-TODOLIST':{\r\n            return [{...action.payload.toDoList, filter: 'all', entityStatus: 'idle'}, ...state];\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            return state.map(toDoList => toDoList.id === action.payload.id ? {...toDoList, title: action.payload.title} : toDoList);\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            return state.map(toDoList => toDoList.id === action.payload.id ? {...toDoList, filter: action.payload.filter} : toDoList);\r\n        }\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS': {\r\n            return state.map(toDoList => toDoList.id === action.payload.id ? {...toDoList, entityStatus: action.payload.status} : toDoList);\r\n        }\r\n        case 'SET-TODOLIST': {\r\n            return action.payload.toDoLists.map(toDoList => ({...toDoList, filter: \"all\", entityStatus: 'idle'}));\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// actions\r\nexport type RemoveTodolistACType = ReturnType<typeof removeTodolistAC>\r\nexport const removeTodolistAC = (id: string) => {\r\n    return {\r\n        type: 'REMOVE-TODOLIST',\r\n        payload: {\r\n            id,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport type AddTodolistACType = ReturnType<typeof addTodolistAC>\r\nexport const addTodolistAC = (toDoList: ToDoListType) => {\r\n    return {\r\n        type: 'ADD-TODOLIST',\r\n        payload: {\r\n            toDoList,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport type ChangeTodolistTitleACType = ReturnType<typeof changeTodolistTitleAC>\r\nexport const changeTodolistTitleAC = (id: string, title: string) => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-TITLE',\r\n        payload: {\r\n            id,\r\n            title,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport type ChangeTodolistFilterACType = ReturnType<typeof changeTodolistFilterAC>\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-FILTER',\r\n        payload: {\r\n            id,\r\n            filter,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport type ChangeTodolistEntityStatusACType = ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport const changeTodolistEntityStatusAC = (id: string, status: StatusType) => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n        payload: {\r\n            id,\r\n            status,\r\n        },\r\n    } as const\r\n}\r\n\r\nexport type SetToDoListsACType = ReturnType<typeof setToDOListsAC>\r\nexport const setToDOListsAC = (toDoLists: Array<ToDoListType>) => {\r\n    return {\r\n        type: 'SET-TODOLIST',\r\n        payload: {\r\n            toDoLists,\r\n        },\r\n    } as const\r\n}\r\n\r\n// thunks\r\nexport const fetchToDoLists = () => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatus('loading'));\r\n    todolistsApi.getToDoLists()\r\n        .then(({data}) => {\r\n            dispatch(setToDOListsAC(data));\r\n            dispatch(setAppStatus('succeeded'));\r\n        })\r\n        .catch((error) => {\r\n            dispatch(setAppError(error.message ? error.message : 'Some error'));\r\n            dispatch(setAppStatus('failed'));\r\n        });\r\n}\r\n\r\nexport const deleteToDoList = (toDoListID: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatus('loading'));\r\n    dispatch(changeTodolistEntityStatusAC(toDoListID,'loading'));\r\n    todolistsApi.deleteToDoList(toDoListID)\r\n        .then(({data}) => {\r\n            console.log(data)\r\n            if (data.resultCode === 0) {\r\n                dispatch(removeTodolistAC(toDoListID));\r\n                dispatch(setAppStatus('succeeded'));\r\n                dispatch(changeTodolistEntityStatusAC(toDoListID,'succeeded'));\r\n            } else {\r\n                handleServerAppError(toDoListID, data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(toDoListID, error, dispatch);\r\n        });\r\n}\r\n\r\nexport const createToDoList = (title: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatus('loading'));\r\n    todolistsApi.createToDoList(title)\r\n        .then(({data}) => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(addTodolistAC(data.data.item));\r\n                dispatch(setAppStatus('succeeded'));\r\n            } else {\r\n                if (data.messages.length) {\r\n                    dispatch(setAppError(data.messages[0]));\r\n                } else {\r\n                    dispatch(setAppError('some error occurred'));\r\n                }\r\n                dispatch(setAppStatus('failed'));\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            dispatch(setAppError(error.message ? error.message : 'Some error'));\r\n            dispatch(setAppStatus('failed'));\r\n        });\r\n}\r\n\r\nexport const changeToDoListTitle = (toDoListID: string, title: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatus('loading'));\r\n    dispatch(changeTodolistEntityStatusAC(toDoListID,'loading'));\r\n    todolistsApi.updateToDoList(toDoListID, title)\r\n        .then(({data}) => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(changeTodolistTitleAC(toDoListID, title));\r\n                dispatch(setAppStatus('succeeded'));\r\n                dispatch(changeTodolistEntityStatusAC(toDoListID,'succeeded'));\r\n            } else {\r\n                handleServerAppError(toDoListID, data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(toDoListID, error, dispatch);\r\n        });\r\n}","import {\r\n    AddTodolistACType,\r\n    changeTodolistEntityStatusAC, ChangeTodolistEntityStatusACType,\r\n    RemoveTodolistACType,\r\n    SetToDoListsACType,\r\n    TasksStateType\r\n} from \"./todolists-reducer\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsApi, UpdateTaskType} from \"../../../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../../app/store\";\r\nimport {setAppError, SetAppErrorType, setAppStatus, SetAppStatusType} from \"../../../app/reducers/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/error-utils\";\r\n\r\nexport type UpdateTaskModelType = {\r\n    title?: string,\r\n    description?: string,\r\n    status?: TaskStatuses,\r\n    priority?: TaskPriorities,\r\n    startDate?: string,\r\n    deadline?: string,\r\n}\r\n\r\ntype ActionType = RemoveTaskACType\r\n                | AddTaskACType\r\n                | UpdateTaskACType\r\n                | AddTodolistACType\r\n                | RemoveTodolistACType\r\n                | SetToDoListsACType\r\n                | SetTasksACType;\r\n\r\ntype ThunkDispatch = Dispatch<ActionType | SetAppErrorType | SetAppStatusType | ChangeTodolistEntityStatusACType>;\r\n\r\nexport const tasksReducer = (state: TasksStateType = {}, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId].filter(task => task.id !== action.payload.taskId),\r\n            };\r\n        }\r\n        case 'ADD-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.payload.task.todoListId]: [action.payload.task, ...state[action.payload.task.todoListId]],\r\n            };\r\n        }\r\n        case 'UPDATE-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: state[action.payload.todolistId].map(task => task.id === action.payload.taskId ? {...task, ...action.payload.model} : task),\r\n            }\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.payload.toDoList.id]: [],\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state}\r\n            delete copyState[action.payload.id]\r\n            return copyState;\r\n        }\r\n        case 'SET-TODOLIST': {\r\n            const copyState = {...state}\r\n            action.payload.toDoLists.forEach((toDoList) => {\r\n                copyState[toDoList.id] = [];\r\n            })\r\n            return copyState;\r\n        }\r\n        case 'SET-TASKS': {\r\n            return {\r\n                ...state,\r\n                [action.payload.todolistId]: action.payload.tasks,\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// actions\r\ntype RemoveTaskACType = ReturnType<typeof removeTaskAC>;\r\nexport const removeTaskAC = (todolistId: string, taskId: string) => {\r\n    return {\r\n        type: 'REMOVE-TASK',\r\n        payload: {\r\n            todolistId,\r\n            taskId,\r\n        },\r\n    } as const\r\n}\r\n\r\ntype AddTaskACType = ReturnType<typeof addTaskAC>;\r\nexport const addTaskAC = (task: TaskType) => {\r\n    return {\r\n        type: 'ADD-TASK',\r\n        payload: {\r\n            task,\r\n        },\r\n    } as const\r\n}\r\n\r\ntype UpdateTaskACType = ReturnType<typeof updateTaskAC>;\r\nexport const updateTaskAC = (todolistId: string, taskId: string, model: UpdateTaskModelType) => {\r\n    return {\r\n        type: 'UPDATE-TASK',\r\n        payload: {\r\n            todolistId,\r\n            taskId,\r\n            model,\r\n        },\r\n    } as const\r\n}\r\n\r\ntype SetTasksACType = ReturnType<typeof setTasksAC>\r\nexport const setTasksAC = (todolistId: string, tasks: Array<TaskType>) => {\r\n    return {\r\n        type: 'SET-TASKS',\r\n        payload: {\r\n            todolistId,\r\n            tasks,\r\n        }\r\n    } as const\r\n}\r\n\r\n// thunks\r\nexport const fetchTasks = (toDoListID: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatus('loading'));\r\n    dispatch(changeTodolistEntityStatusAC(toDoListID,'loading'));\r\n    todolistsApi.getTasks(toDoListID)\r\n        .then(({data}) => {\r\n            if (data.error === null) {\r\n                dispatch(setTasksAC(toDoListID, data.items));\r\n                dispatch(setAppStatus('succeeded'));\r\n                dispatch(changeTodolistEntityStatusAC(toDoListID,'succeeded'));\r\n            } else {\r\n                dispatch(setAppError(data.error));\r\n                dispatch(setAppStatus('failed'));\r\n                dispatch(changeTodolistEntityStatusAC(toDoListID,'failed'));\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(toDoListID, error, dispatch);\r\n        });\r\n}\r\n\r\nexport const deleteTask = (toDoListID: string, taskID: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatus('loading'));\r\n    dispatch(changeTodolistEntityStatusAC(toDoListID,'loading'));\r\n    todolistsApi.deleteTask(toDoListID, taskID)\r\n        .then(({data}) => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(removeTaskAC(toDoListID, taskID))\r\n                dispatch(setAppStatus('succeeded'));\r\n                dispatch(changeTodolistEntityStatusAC(toDoListID,'succeeded'));\r\n            } else {\r\n                handleServerAppError(toDoListID, data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(toDoListID, error, dispatch);\r\n        });\r\n}\r\n\r\nexport const createTask = (toDoListID: string, title: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatus('loading'));\r\n    dispatch(changeTodolistEntityStatusAC(toDoListID,'loading'));\r\n    todolistsApi.createTask(toDoListID, title)\r\n        .then(({data}) => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(addTaskAC(data.data.item));\r\n                dispatch(setAppStatus('succeeded'));\r\n                dispatch(changeTodolistEntityStatusAC(toDoListID,'succeeded'));\r\n            } else {\r\n                handleServerAppError(toDoListID, data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(toDoListID, error, dispatch);\r\n        });\r\n}\r\n\r\nexport const updateTask = (toDoListID: string, taskID: string, modelTask: UpdateTaskModelType) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n    dispatch(setAppStatus('loading'));\r\n    dispatch(changeTodolistEntityStatusAC(toDoListID,'loading'));\r\n    const state = getState();\r\n    const task = state.tasks[toDoListID].find(task => task.id === taskID);\r\n    if (!task) {\r\n        dispatch(setAppStatus('failed'));\r\n        dispatch(changeTodolistEntityStatusAC(toDoListID,'failed'));\r\n        console.warn('Task is not found');\r\n        return;\r\n    }\r\n\r\n    const updatedTask: UpdateTaskType = {\r\n        title: task.title,\r\n        description: task.description,\r\n        status: task.status,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        deadline: task.deadline,\r\n        ...modelTask,\r\n    }\r\n\r\n    todolistsApi.updateTask(toDoListID, taskID, updatedTask)\r\n        .then(({data}) => {\r\n            if (data.resultCode === 0) {\r\n                dispatch(updateTaskAC(toDoListID, taskID, modelTask));\r\n                dispatch(setAppStatus('succeeded'));\r\n                dispatch(changeTodolistEntityStatusAC(toDoListID,'succeeded'));\r\n            } else {\r\n                handleServerAppError(toDoListID, data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(toDoListID, error, dispatch);\r\n        });\r\n}","import React, {ChangeEvent, memo} from 'react';\r\nimport {Checkbox, IconButton} from \"@mui/material\";\r\nimport {EditableSpan} from \"../../EditableSpan/EditableSpan\";\r\nimport {DeleteOutline} from \"@mui/icons-material\";\r\nimport {TaskStatuses} from \"../../../api/todolists-api\";\r\nimport s from './Task.module.css';\r\n\r\nexport type TaskPropsType = {\r\n    taskId: string,\r\n    title: string,\r\n    status: TaskStatuses,\r\n    changeStatus: (taskId: string, e: ChangeEvent<HTMLInputElement>) => void,\r\n    updateTask: (taskId: string, title: string) => void,\r\n    removeTask: (taskId: string) => void,\r\n    disabled?: boolean,\r\n}\r\n\r\nexport const Task = memo((props: TaskPropsType) => {\r\n\r\n    return (\r\n        <div key={props.taskId} className={s.taskWrap}>\r\n            <div className={s.textWrap}>\r\n                <Checkbox\r\n                    checked={props.status === TaskStatuses.Completed}\r\n                    onChange={(e) => props.changeStatus(props.taskId, e)}\r\n                    disabled={props.disabled}\r\n                />\r\n                <EditableSpan\r\n                    callBack={(title) => props.updateTask(props.taskId, title)}\r\n                    title={props.title}\r\n                    disabled={props.disabled}\r\n                />\r\n            </div>\r\n            <IconButton\r\n                onClick={() => props.removeTask(props.taskId)}\r\n                disabled={props.disabled}\r\n            >\r\n                <DeleteOutline />\r\n            </IconButton>\r\n        </div>\r\n    );\r\n});","import React, {ChangeEvent, memo, useCallback, useEffect} from \"react\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {InputWithButton} from \"../Input/InputWithButton\";\r\nimport {DeleteOutline} from \"@mui/icons-material\";\r\nimport {Button, ButtonGroup, IconButton, Paper} from \"@mui/material\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {\r\n    createTask, deleteTask,\r\n    fetchTasks, updateTask,\r\n} from \"./reducers/tasks-reducer\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {FilterValuesType, ToDoListDomainType} from \"./reducers/todolists-reducer\";\r\nimport {TaskStatuses, TaskType} from \"../../api/todolists-api\";\r\nimport s from './ToDoList.module.css';\r\n\r\ntype ToDoListPropsTypes = {\r\n    toDoList: ToDoListDomainType\r\n    changeFilter: (toDoListID: string, filter: FilterValuesType) => void\r\n    removeToDoList: (toDoListID: string) => void\r\n    updateToDoListTitle: (toDoListID: string, title: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const ToDoList = memo(({demo = false, ...props}: ToDoListPropsTypes) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const tasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[props.toDoList.id]);\r\n    const disabled = props.toDoList.entityStatus === 'loading';\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return;\r\n        }\r\n        dispatch(fetchTasks(props.toDoList.id));\r\n    }, []);\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        dispatch(createTask(props.toDoList.id, title));\r\n    }, [dispatch, props.toDoList.id]);\r\n\r\n    const removeTask = useCallback((taskID: string) => {\r\n        dispatch(deleteTask(props.toDoList.id, taskID));\r\n    }, [dispatch, props.toDoList.id]);\r\n\r\n    const updateTaskTitle = useCallback((taskID: string, title: string) => {\r\n        dispatch(updateTask(props.toDoList.id, taskID, {title}))\r\n    }, [dispatch, props.toDoList.id]);\r\n\r\n    const changeStatus = useCallback((taskID: string, e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(updateTask(props.toDoList.id, taskID, e.currentTarget.checked ? {status: TaskStatuses.Completed} : {status: TaskStatuses.New}))\r\n    }, [dispatch, props.toDoList.id]);\r\n\r\n\r\n    const onClickFilterAllTasks = useCallback(() => props.changeFilter(props.toDoList.id, 'all'), [props.toDoList.id, props.changeFilter]);\r\n    const onClickFilterActiveTasks = useCallback(() => props.changeFilter(props.toDoList.id, 'active'), [props.toDoList.id, props.changeFilter]);\r\n    const onClickFilterCompletedTasks = useCallback(() => props.changeFilter(props.toDoList.id, 'completed'), [props.toDoList.id, props.changeFilter]);\r\n\r\n    const onClickRemoveToDoList = () => props.removeToDoList(props.toDoList.id);\r\n    const updateToDoListTitle = useCallback((title: string) => props.updateToDoListTitle(props.toDoList.id, title), [props.updateToDoListTitle, props.toDoList.id]);\r\n\r\n    let tasksForTodolist = tasks;\r\n\r\n    if (props.toDoList.filter === \"active\") {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.toDoList.filter === \"completed\") {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n    const taskList = tasksForTodolist.map((t: TaskType) => {\r\n        return (\r\n            <Task\r\n                key={t.id}\r\n                taskId={t.id}\r\n                title={t.title}\r\n                status={t.status}\r\n                changeStatus={changeStatus}\r\n                updateTask={updateTaskTitle}\r\n                removeTask={removeTask}\r\n                disabled={disabled}\r\n            />\r\n        )\r\n    })\r\n\r\n    return (\r\n        <Paper style={{padding: '10px', maxWidth: '255px'}}>\r\n            <h3 className={s.toDoListTitle}>\r\n                <EditableSpan title={props.toDoList.title} callBack={updateToDoListTitle} disabled={disabled}/>\r\n                <IconButton onClick={onClickRemoveToDoList} disabled={disabled}>\r\n                    <DeleteOutline />\r\n                </IconButton>\r\n            </h3>\r\n            <InputWithButton callBack={addTask} disabled={disabled} placeholder={'Enter task title'}/>\r\n            <div>\r\n                {taskList}\r\n            </div>\r\n            <ButtonGroup>\r\n                <Button\r\n                    color={'secondary'}\r\n                    variant={props.toDoList.filter === 'all' ? 'contained' : 'outlined'}\r\n                    onClick={onClickFilterAllTasks}\r\n                >\r\n                    All\r\n                </Button>\r\n                <Button\r\n                    color={'primary'}\r\n                    variant={props.toDoList.filter === 'active' ? 'contained' : 'outlined'}\r\n                    onClick={onClickFilterActiveTasks}\r\n                >\r\n                    Active\r\n                </Button>\r\n                <Button\r\n                    color={'success'}\r\n                    variant={props.toDoList.filter === 'completed' ? 'contained' : 'outlined'}\r\n                    onClick={onClickFilterCompletedTasks}\r\n                >\r\n                    Completed\r\n                </Button>\r\n            </ButtonGroup>\r\n        </Paper>\r\n    )\r\n});","import React, {useCallback, useEffect} from 'react';\r\nimport {Grid} from \"@mui/material\";\r\nimport {InputWithButton} from \"../../components/Input/InputWithButton\";\r\nimport {ToDoList} from \"../../components/ToDoList/ToDoList\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {\r\n    changeTodolistFilterAC, changeToDoListTitle, createToDoList, deleteToDoList,\r\n    fetchToDoLists,\r\n    FilterValuesType,\r\n    ToDoListDomainType\r\n} from \"../../components/ToDoList/reducers/todolists-reducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const ToDoListsList: React.FC<PropsType> = ({demo = false}) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const toDoLists = useSelector<AppRootStateType, Array<ToDoListDomainType>>(state => state.toDoLists);\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn);\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        dispatch(fetchToDoLists());\r\n    }, []);\r\n\r\n    const changeFilter = useCallback((toDoListID: string, filter: FilterValuesType) => {\r\n        dispatch(changeTodolistFilterAC(toDoListID, filter));\r\n    }, [dispatch]);\r\n\r\n    const removeToDoList = useCallback((toDoListID: string) => {\r\n        dispatch(deleteToDoList(toDoListID));\r\n    }, [dispatch]);\r\n\r\n    const updateToDoListTitle = useCallback((toDoListID: string, title: string) => {\r\n        dispatch(changeToDoListTitle(toDoListID, title));\r\n    }, [dispatch]);\r\n\r\n    const addToDoList = useCallback((title: string) => {\r\n        dispatch(createToDoList(title));\r\n    }, [dispatch]);\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{paddingTop: '20px'}}>\r\n                <InputWithButton callBack={addToDoList} placeholder={'Enter ToDoList title'}/>\r\n            </Grid>\r\n            <Grid container spacing={2}>\r\n                {toDoLists.map(list => {\r\n                    return (\r\n                        <Grid key={list.id} item>\r\n                            <ToDoList\r\n                                key={list.id}\r\n                                toDoList={list}\r\n                                changeFilter={changeFilter}\r\n                                removeToDoList={removeToDoList}\r\n                                updateToDoListTitle={updateToDoListTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Grid>\r\n                    )\r\n                })}\r\n            </Grid>\r\n        </>\r\n    );\r\n};","import * as React from 'react';\r\nimport Stack from '@mui/material/Stack';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAppError} from \"../../app/reducers/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n    const dispatch = useDispatch<Dispatch>();\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const isOpen = error !== null;\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppError(null));\r\n    };\r\n\r\n    return (\r\n        <Stack spacing={2} sx={{ width: '100%' }}>\r\n            <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\" sx={{ width: '100%' }}>\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n        </Stack>\r\n    );\r\n}","import React from 'react';\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from \"@mui/material\";\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {login} from \"./reducers/auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nexport const Auth = () => {\r\n    const dispatch = useDispatch();\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required',\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required',\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(login(values));\r\n        },\r\n    });\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return (\r\n        <Grid container justifyContent={'center'}>\r\n            <Grid item xs={4}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl>\r\n                        <FormLabel>\r\n                            <p>\r\n                                To log registered <a href=\"https://social-network.samuraijs.com/\" target={'_blank'}>here</a>\r\n                            </p>\r\n                            <p>\r\n                                Guest authorization\r\n                            </p>\r\n                            <p>\r\n                                email: free@samuraijs.com\r\n                            </p>\r\n                            <p>\r\n                                password: free\r\n                            </p>\r\n                        </FormLabel>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                label={'Email'}\r\n                                margin={'normal'}\r\n                                {...formik.getFieldProps('email')}\r\n                            />\r\n                            {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                            <TextField\r\n                                label={'Password'}\r\n                                margin={'normal'}\r\n                                type={'password'}\r\n                                {...formik.getFieldProps('password')}\r\n                            />\r\n                            {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                            <FormControlLabel\r\n                                control={<Checkbox\r\n                                    {...formik.getFieldProps('rememberMe')}\r\n                                    checked={formik.values.rememberMe}\r\n                                /> }\r\n                                label={'Remember me'}\r\n                            />\r\n                            <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                                Login\r\n                            </Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from \"@mui/material\";\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ToDoListsList} from \"../features/ToDoListsList/ToDoListsList\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {Route, Routes} from \"react-router-dom\";\r\nimport {Auth} from \"../features/Auth/Auth\";\r\nimport {initializeApp} from \"./reducers/app-reducer\";\r\nimport {logOut} from \"../features/Auth/reducers/auth-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const dispatch = useDispatch();\r\n    const isInitialised = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized);\r\n    const status = useSelector<AppRootStateType>(state => state.app.status);\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn);\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeApp());\r\n    }, []);\r\n\r\n    const logOutHandler = useCallback( () => {\r\n        dispatch(logOut());\r\n    }, [])\r\n\r\n    if (!isInitialised) {\r\n        return (\r\n            <div style={{marginTop: '200px', textAlign: 'center'}}>\r\n                <CircularProgress color=\"secondary\" />\r\n            </div>\r\n        );\r\n    }\r\n    return (\r\n        <div>\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{mr: 2}}\r\n                    >\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logOutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            <div style={{height: '4px'}}>\r\n                {status === 'loading' && <LinearProgress color={\"secondary\"}/>}\r\n            </div>\r\n            <Container>\r\n                <Routes>\r\n                    <Route path={'/'} element={<ToDoListsList demo={demo}/>}/>\r\n                    <Route path={'/login'} element={<Auth/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {tasksReducer} from \"../components/ToDoList/reducers/tasks-reducer\";\r\nimport {todolistsReducer} from \"../components/ToDoList/reducers/todolists-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {appReducer} from \"./reducers/app-reducer\";\r\nimport {authReducer} from \"../features/Auth/reducers/auth-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    toDoLists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </HashRouter>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"EditableSpan_text__30hW1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskWrap\":\"Task_taskWrap__3XbEG\",\"textWrap\":\"Task_textWrap__1tplp\"};"],"sourceRoot":""}